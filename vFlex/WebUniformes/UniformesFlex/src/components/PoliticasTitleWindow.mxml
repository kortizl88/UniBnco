<?xml version="1.0"?>
<containers:UniformesTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
                                 xmlns:s="library://ns.adobe.com/flex/spark"
                                 xmlns:containers="containers.*"
                                 xmlns:components="components.*"
                                 title="Políticas de Uniformes"
                                 skinClass="skins.RedTitleWindowSkin"
                                 controlBarVisible="{!_flagPoliticasAceptadas}">
    <fx:Script>
        <![CDATA[
        import mx.collections.ArrayCollection;
        import mx.controls.ToolTip;
        import mx.core.FlexGlobals;
        import mx.managers.ToolTipManager;

        private var tip:ToolTip;

        [Bindable]
        private var _numEmpleado:int;

        [Bindable]
        private var _nombreEmpleado:String;

        [Bindable]
        private var _flagPoliticasAceptadas:Boolean;

        [Bindable]
        private var _flagManualImagen:Boolean;

        private const politicasDP:ArrayCollection = new ArrayCollection([
            "img/politicas_1.png",
            "img/politicas_2.png",
            "img/politicas_3.png",
            "img/politicas_4.png",
            "img/politicas_5.png",
            "img/politicas_6.png"
        ]);

        private function aceptarHandler(event:MouseEvent):void {
            this.dispatchEvent(new Event("politicasAceptadas"));
        }

        private function handleCheckBox(event:MouseEvent):void {
            quitarToolTip();
            aceptarButton.enabled = checkBox.selected;
        }

        public function get flagPoliticasAceptadas():Boolean {
            return _flagPoliticasAceptadas;
        }

        public function set flagPoliticasAceptadas(value:Boolean):void {
            _flagPoliticasAceptadas = value;
        }

        public function mostrarToolTip():void {
            FlexGlobals.topLevelApplication.addEventListener("quitarToolTips", quitarToolTip);
            if (!_flagPoliticasAceptadas && this.parent != null) {
                var point:Point = new Point(checkBox.x, checkBox.y);
                var globalPoint:Point = controlBar.localToGlobal(point);
                tip = ToolTipManager.createToolTip(
                        "Para solicitar tu uniforme debes leer y aceptar las políticas",
                                globalPoint.x - 7,
                        globalPoint.y,
                        "errorTipAbove",
                        controlBar) as ToolTip;
                tip.y -= tip.height;
                tip.setStyle("borderColor", 0x6495ed);
                tip.setStyle("color", 0xffffff);
                tip.setStyle("fontWeight", "bold");
            }

        }

        private function quitarToolTip(event:Event = null):void {
            if (tip != null) {
                ToolTipManager.destroyToolTip(tip);
                tip = null;
            }
        }


        public function get numEmpleado():int {
            return _numEmpleado;
        }

        public function set numEmpleado(value:int):void {
            _numEmpleado = value;
        }

        public function get nombreEmpleado():String {
            return _nombreEmpleado;
        }

        public function set nombreEmpleado(value:String):void {
            _nombreEmpleado = value;
        }

        public function set flagManualImagen(value:Boolean):void {
            _flagManualImagen = value;
        }
        ]]>
    </fx:Script>


    <containers:rightControlContent>
        <components:BotonAyuda numEmpleado="{_numEmpleado}" nombreEmpleado="{_nombreEmpleado}"/>
    </containers:rightControlContent>

    <containers:leftControlContent>
        <s:Image xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                 source="@Embed(source='/assets/book_info.png')" left="5" top="3"
                 useHandCursor="true"
                 mouseChildren="false"
                 buttonMode="true"
                 click="{this.dispatchEvent(new Event('manualDeImagen'))}"
                 visible="{_flagManualImagen}"/>
    </containers:leftControlContent>

    <s:List id="politicasList"
            width="100%" height="100%"
            preventSelection="true"
            contentBackgroundColor="0xd3d3d3"
            horizontalCenter="0"
            verticalCenter="0"
            dataProvider="{politicasDP}"
            useVirtualLayout="false">
        <s:layout>
            <s:VerticalLayout horizontalAlign="center" variableRowHeight="true"/>
        </s:layout>
        <s:itemRenderer>
            <fx:Component>
                <s:ItemRenderer autoDrawBackground="false" width="100%"
                                height="{image.height}"
                                maxWidth="1000">
                    <s:Image id="image"
                             source="{data}"
                             scaleMode="letterbox"
                             smooth="true"
                             width="100%"
                             height="{image.bitmapData.height * (image.width / image.bitmapData.width)}"
                             verticalAlign="top"/>
                </s:ItemRenderer>
            </fx:Component>
        </s:itemRenderer>
    </s:List>


    <containers:controlBarContent>
        <s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle" id="controlBar">
            <s:CheckBox id="checkBox" click="handleCheckBox(event)"/>
            <s:Label text="He leído y Acepto las Políticas y Reglas de Uniformes" fontWeight="bold"/>
            <s:Button id="aceptarButton"
                      chromeColor="blue"
                      color="white"
                      label="Aceptar"
                      click="aceptarHandler(event)"
                      enabled="false"/>
        </s:HGroup>
    </containers:controlBarContent>


</containers:UniformesTitleWindow>
