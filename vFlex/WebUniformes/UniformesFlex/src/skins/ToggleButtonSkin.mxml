<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->


<!--- The default skin class for a Spark ToggleButton component.

 @see spark.components.ToggleButton

 @langversion 3.0
 @playerversion Flash 10
 @playerversion AIR 1.5
 @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21" minHeight="21"
                   alpha.disabledStates="0.5">

    <!-- host component -->
    <fx:Metadata>
    <![CDATA[
        /**
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ToggleButton")]
        ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        import mx.graphics.BitmapFillMode;
        import mx.graphics.BitmapScaleMode;

        /* Define the skin elements that should not be colorized.
         For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */
        override public function get colorizeExclusions():Array {
            return exclusions;
        }

        /**
         * @private
         */
        override protected function initializationComplete():void {
            useChromeColor = true;
            super.initializationComplete();
        }

        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            var cr:Number = getStyle("cornerRadius");

            if (cornerRadius != cr) {
                cornerRadius = cr;
                fill.radiusX = cornerRadius;
                border.radiusX = cornerRadius;
            }

            super.updateDisplayList(unscaledWidth, unscaledHeight);

            if (iconDisplay) {
                if (unscaledWidth >= iconDisplay.bitmapData.width + 10) {
                    iconDisplay.width = iconDisplay.bitmapData.width;
                    iconDisplay.smooth = false;
                    iconDisplay.fillMode = BitmapFillMode.CLIP;
                } else {
                    iconDisplay.width = unscaledWidth - 10;
                    iconDisplay.fillMode = BitmapFillMode.SCALE;
                    iconDisplay.smooth = true;
                    iconDisplay.scaleMode = BitmapScaleMode.LETTERBOX;
                }


            }
        }

        private var cornerRadius:Number = 2;

    </fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="up"/>
        <s:State name="over" stateGroups="overStates"/>
        <s:State name="down" stateGroups="downStates"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates"/>
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates"/>
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates"/>
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates"/>
    </s:states>

    <!-- layer 2: fill -->
    <!--- @private -->
    <s:Rect id="fill" left="0" right="0" top="0" bottom="0" radiusX="2">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry color="0xFFFFFF"
                                 color.over="0xD8D8D8"
                                 color.down="0xFF00000"
                                 color.selectedStates="0xc30115"
                                 alpha.down="0.6375"
                                 alpha="1"/>
                <s:GradientEntry color="0xD8D8D8"
                                 color.over="0xFFFFFF"
                                 color.down="0xD80000"
                                 color.selectedStates="0x76131a"
                                 alpha.down="0.6375"
                                 alpha="1"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>


    <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <!--- @private -->
    <s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20" radiusX="2">
        <s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color.selectedStates="0x76131a"
                                 color="0x555555"
                                 color.over="0xAA0000"
                                 alpha="0.5625"
                                 alpha.down="0.6375"
                                 alpha.selectedStates="0.6375"/>
                <s:GradientEntry color.selectedStates="0xc30115"
                                 color="0x555555"
                                 color.over="0xAA0000"
                                 alpha="0.75"
                                 alpha.down="0.85"
                                 alpha.selectedStates="0.85"/>
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>

    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
             textAlign="center"
             verticalAlign="middle"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1"
             left="10" right="10" top="2" bottom="2">
    </s:Label>

</s:SparkButtonSkin>